package exceptionExam;

public class ExceptionTest1 {

	public static void main(String[] args) {
//예외(Exception)
/*
 * Exception : 개발자가 해결 가능한 오류 ( 대체 방안을 만들어서 해결)
 * 			   연산오류, 포맷 오류,...
 * Error : jvm 자체의 오류로 개발자가 해결할 수 없음
 * 		   메모리부족, 스레드 문제,...
 * 
 * 1. Exception의 종류
 *   1) 일반예외 : 문법체크, 컴파일 자체가 불가능(빨간줄..) //  ex) System.out.println("가나);
 *   2) 실행예외 : 문법체크 X , 예외가 발생되면 프로그램이 종료. 예외메시지 출력  ex) System.out.println(7/0); /by zero
 * 
 * 2. 구문 
 *		try {
 *			 예외가 발생할 가능성이 있는 구문
 *		}catch (예외종류 참조변수){
 *			 예외가 발생할 때 실행할 문장
 * 		}catch (예외종류 참조변수){
 *			 예외가 발생할 때 실행할 문장
 *		}...{catch (예외종류 참조변수){
 *			 예외가 발생할 때 실행할 문장
 * 		}
 * 
 * 		try{
 * 			예외가 발생할 가능성이 있는 구문
 *		}catch (예외종류 참조변수){
 * 			예외가 발생할 때 실행할 문장
 *		}finally{
 *			 예외가 발생하든 발생하지 않든 실행할 문장
 *		}
 */
		
		
		
//		System.out.println("가나);
//		System.out.println(7/0); /by zero
		
		int a=9,b=0;
		try {
			System.out.println(a/b);
			
		} catch(ArithmeticException e) {  // 예외가 발생할 수 있는 경우들을 catch문을 이용해 선언
//			System.out.println(e.toString());		//개발 끝나면 반드시 주석처리 또는 제거 
						//java.lang.ArithmeticException: / by zero
//			System.out.println(e.getMessage());	//개발 끝나면 반드시 주석처리 또는 제거 
						/// by zero
			e.printStackTrace(); // 계발단계에서 확인용으로만 사용하고
//								 개발이 끝난 후 반드시 주석처리하거나 제거한다.
								// 제거 안하면 보안 위험이 생김
			System.out.println("0으로 나눌 수 없음");
		} catch (Exception e) {

	    }
	
	
	
	
	
	
	
	
	
	}
}
